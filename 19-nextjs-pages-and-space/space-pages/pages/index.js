// let's import the router here
import { useRouter } from 'next/router';

// we're going to import state and effect
import {useState, useEffect} from 'react'
import Head from 'next/head'

import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';

import AgencyCard from '@components/AgencyCard';
import NavBar from '@components/NavBar';

import { getAgencies } from '@utils/api/agencies';


export default function Home() {
  // we're going to need the router as we'll be
  // modifying the query parameters of the page
  const router = useRouter()

  // state for the search
  const [searchQuery, setSearchQuery] = useState("")

  // we're going to get and load the data
  const [isLoading, setIsLoading] = useState(true)
  const [agencies, setAgencies] = useState() // leave it undefined until we get the data

  // create a loading function
  const loadAgencies = async () => {
    // we're going to pass an empty object
    const data = await getAgencies({
      search: searchQuery // passing this in will search
      // the backend for what is in the searchQuery stateful value
    })
    // set the agencies, and handle the lading state.
    setAgencies(data)
    setIsLoading(false)
  }

  // we're going to update the searchQuery with our state
  // but we're also going to update the query parameters
  // to the page using router.replace, router.replace
  // is different than push because it'll just replace
  // the current spot in the "history" with the path
  // passed in.
  const updateSearch = (event) => {
    // let's update the searchquery
    setSearchQuery(event.target.value)
    // let's trigger a change in the url
    router.replace({
      query: {
        ...router.query,
        q: event.target.value // update the q in the url
      },
      pathname: router.pathname,
    },
    undefined, // we're staying on the page so this dosn't matter
    {shallow: true} // prevent a page refresh
    // this will make more sense when we talk about backend features of next.js
    )
  }
  // Note: ways to improve this.
  // 1. using debouncing here is a good tool to use
  // so that you don't trigger every key stroke you do after
  // every so many seconds
  // 2. as a general rule normally you only search
  // after a user has enter 3 or more characters
  // you can do this on your own!


  // let's listen to the router and set the search query
  useEffect(()=> {
    // the guard if the router isn't ready
    if (!router.isReady) {
      return
    }
    // we're going to do something with the state here
    // we're going set the state to q from router
    // query or an empty string if it doesn't exist yet.
    // this would mean if the path is /?q=nasa the state
    // would be nasa
    setSearchQuery(router.query.q || "")
  }, [router.isReady])



  // we're going to have an effect that will fetch this on load
  useEffect(()=> {
    // the guard if the router isn't ready
    if (!router.isReady) {
      return
    }
    // not the change that this is searching every
    // time we change the search query
    loadAgencies()
  }, [searchQuery]) // let's cahnge this to listen to the searchQuery

  // handle the loading
  if (isLoading) {
    return "Loading ..."
  }
  // display the agencies if it hits here it'll be defined
  console.log(agencies)


  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <NavBar />

        <Container sx={{paddingTop:2}} component="main" maxWidth="xs">

          <Typography variant="h3">
            Space Agencies
          </Typography>
          <Box
            sx={{
              marginTop: 2,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
            }}
          >
            {/* we're going to add the textfield */}
            <TextField
              label="Search"
              fullWidth
              // set the value
              value={searchQuery}
              // use our update search
              onChange={updateSearch}
            />

            {/* We're going to loop through
            the results of agencies look at the
            agencies in the console to see the
            shape of it. */
            agencies.results.map((agency)=> {
              return <AgencyCard
                key={agency.id}
                // the ? just check if there is an image obj.
                imageUrl={agency.image?.image_url}
                name={agency.name}
                description={agency.description}
                abbreviation={agency.abbrev}
                // we're going to pass in the id of the agency
                id={agency.id}
              />
            })
            }

          </Box>
        </Container>

    </div>
  )
}
