import {useState} from 'react'

import Head from 'next/head'

import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';

import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';

import { MOVIE_LIST } from '../utils/movies'

export default function Home() {
  // i want you create the stateful values in the form
  // and make the text field controlled.
  // As a note I try to put all of my
  // react hook calls at the top of the
  // component definition.
  const [search, setSearch] = useState("")
  const [year, setYear] = useState("")

  // we're going to make this stateful
  // so that it can change.
  const [movies, setMovies] = useState(MOVIE_LIST)

  // error message a stateful value.
  const [errorMessage, setErrorMessage] = useState("")

  /*
    to filter movies we'll need:
    - search value
    - handler for the form submission
    - temporary array
      - set movies
        - filtered
  */
  const handleForm = (event) => {
    event.preventDefault()
    // we can call the is year valid
    if (isYearValid()) {
      // empty array of movies
      setMovies([])
    }
    // we're going to create a temporary list.
    let filteredMovies = [...MOVIE_LIST]
    // check search exists
    if (search.trim() !== "") {
      filteredMovies = filteredMovies.filter((movie)=> {
        let lowerSearch = search.toLowerCase()
        let lowerMovie = movie.name.toLowerCase()
        // return true keep it, return false to ignore it
        // .include returns true or false
        return lowerMovie.includes(lowerSearch)
      })
    }

    // filter the year.
    if (year.trim() !== "") {
      filteredMovies = filteredMovies.filter((movie)=> {
        return movie.year === parseInt(year)
      })
    }

    // set the state of the page.
    setMovies(filteredMovies)
  }

  const isYearValid  = () => {
    // is going to be called in the function handleForm
    // check if it's empty
    if (year.trim() === "") {
      setErrorMessage("")
      return true
    }
    // return true or false based on is the year valid
    if (isNaN(year)) {
      setErrorMessage("A string is not a valid year")
      return false
    }
    // display an error message in your jsx
    if (parseInt(year) > 2200 || parseInt(year) < 1895) {
      setErrorMessage("Not a valid year.")
      return false
    }
    // remove it if there's no error
    // hint: use shortcircuit
    setErrorMessage("")
    return true
  }

  return (
    <div>
      <Head>
        <title>Our Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <main>
        <Container>
          <Typography variant="h2" component="h2" style={{textAlign: "center"}}>
            Movies
          </Typography>
          <form
            onSubmit={handleForm}
            style={{width: '100%'}}
          >
            <Grid container spacing={2}>
              <Grid item xs={6}>
                {/* make this controlled
                let's make a online function
                to update the state */}
                <TextField
                  id="search-field"
                  label="search..."
                  variant="standard"
                  sx={{width: '100%'}}
                  value={search}
                  onChange={(event)=> {
                    setSearch(event.target.value)
                  }}
                />
              </Grid>
              <Grid item xs={4}>
                <TextField
                  error={errorMessage !== ""}
                  helperText={errorMessage}
                  id="year-field"
                  label="year"
                  variant="standard"
                  sx={{width: '100%'}}
                  value={year}
                  onChange={(event)=> {
                    setYear(event.target.value)
                  }}
                />
              </Grid>
              <Grid item xs={2}>
                <Button
                  type="submit"
                  variant="contained"
                >Filter</Button>
              </Grid>
              <Grid item xs={10}>
                {/* The short circuit
                  This line can be interpreted as follows.
                  if (errorMessage !== "") {
                    show the Alert in jsx
                  }
                */}
                { errorMessage !== "" &&
                  <Alert severity="error">
                    {errorMessage}
                  </Alert>
                }
              </Grid>
            </Grid>
          </form>
          <List sx={{width: `100%`}}>
          {/* make a ternary above the movie
          list that returns a single list item
          that shows the number of results
          or "No Results FOund"
          Note: ternary are mini if statements.
          */
          movies.length === 0 ?
            <ListItem >
              <ListItemText
                primary={"No movies found."}
              />
            </ListItem>
            :
            <ListItem >
              <ListItemText
                primary={`${movies.length} results found`}
              />
            </ListItem>
          }

          {
            movies.map((movieData, index)=> {
              return <ListItem key={index}>
                <ListItemText
                  primary={`${movieData.name} (${movieData.year})`}
                />
              </ListItem>
            })
          }
          </List>
        </Container>
      </main>
    </div>
  )
}
