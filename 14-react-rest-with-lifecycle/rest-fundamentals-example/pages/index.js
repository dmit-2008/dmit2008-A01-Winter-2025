// step one is to import useEffect from react here.
import { useState, useEffect } from "react"

import Head from 'next/head'

import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';

import CircularProgress from "@mui/material/CircularProgress";
import Container from '@mui/material/Container';

import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';

export default function Home() {
  // let's make a stateful value for the loading state
  // make the original false
  const [isLoading, setIsLoading] = useState(false)


  // I want you to make essentially a stateful or values.
  const [quoteData, setQuoteData] = useState({
    quote: "Default quote",
    author: "default author"
  }) // there's none

  // I want you to create a function that is async
  // makes a request to https://stoic.tekloon.net/stoic-quote to get a random quote.
  const loadRandomQuote = async () => {
    const QUOTE_URL = "/api/random_quote"
    // when we're making the request
    try {
      // before the request is made we're going to set this to loading.
      setIsLoading(true)
      // let's essentially make a request here.
      const response = await fetch(QUOTE_URL);
      console.log(response)
      // let's parse the response from json to a js object
      const randomQuoteData = await response.json()

      console.log(randomQuoteData)
      setQuoteData(randomQuoteData)
      // once returned we are going to setIsLoading to false.
      setIsLoading(false)
    } catch (error) {
      console.log(error)
      // should be visible to the user whenever you handle an error
    }
  }

  // I want you to try to useEffect on mount and load the quote.
  useEffect(()=> {
    console.log("On Mount")
    // your useEFfects can't be asynchronous but it can call those functions
    // if you don't use the result.
    // we're using loadRandomQuote is going to set the state in that function
    // we just want to call it, nothing is returned so it's all good.
    loadRandomQuote()
  }, [])
  // important note, do not ever have an effect without a dependency array.
  // it's just going break your application.
  // Next note: If in this next.config.js it's in strict mode what happens is
  // that the effect is called twice. This is a bit of a gotcha, you can turn off
  // react strict mode, or in the future if you're just making a rest api call
  // going to a library like react query is probably a better choice.

  // a good way to handle the loading
  // is to retrun early in this function
  if (isLoading) {
    // we're going return
    return <>
      <AppBar position="relative">
        <Toolbar>
          <Typography variant="h6" color="inherit" noWrap>
            We Love Quotes
          </Typography>
        </Toolbar>
      </AppBar>
      <Box sx={{ display: 'flex' }}>
        <CircularProgress />
      </Box>
    </>
  }



  // I want you to set the values in the jsx for this quote.
  return (
    <div>
      <Head>
        <title>We Love Quotes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>
      <AppBar position="relative">
        <Toolbar>
          <Typography variant="h6" color="inherit" noWrap>
            We Love Quotes
          </Typography>
        </Toolbar>
      </AppBar>
      <main>
        <Container maxWidth="sm">
          <Box
            sx={{
              bgcolor: 'background.paper',
              pt: 8,
              pb: 6,
            }}
          >
            {/*
              Now that we've added this state,
              set the original state to a default
              or I can return early.
            */}
            <Typography variant="h5" align="center" color="text.primary" paragraph>
              {quoteData.quote}
            </Typography>
            <Typography
              component="h1"
              variant="h4"
              align="center"
              color="text.secondary"
              gutterBottom
            >
              {quoteData.author}
            </Typography>
            <Box
             display="flex"
             justifyContent="center"

            >
              <Button
                variant="contained"
                onClick={loadRandomQuote}
              >
                Get New Quote
              </Button>
            </Box>
          </Box>
        </Container>
      </main>
    </div>
  )
}
